#!/bin/bash

FZF_MISC_CMD_OPTS="--layout=reverse --height=50%"
# fkill - kill processes - list only the ones you can kill.
fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m --keep-right --layout=reverse --height=50% | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m --keep-right --height=50% | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}

fman() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

# Select a running docker container to stop
function ds() {
  docker ps | sed 1d | fzf -q "$1" $FZF_MISC_CMD_OPTS --no-sort -m --tac | awk '{print $1}' | xargs -r docker stop
}

# Same as above, but allows multi selection:
function drm() {
    container=$(docker ps -a | sed 1d | fzf -q "$1" $FZF_MISC_CMD_OPTS --no-sort -m --tac | awk '{ print $1 }') 
    docker stop $container
    docker rm $container
}

# Select a docker image or images to remove
function drmi() {
  docker images | sed 1d | fzf -q "$1" $FZF_MISC_CMD_OPTS --no-sort -m --tac | awk '{ print $3 }' | xargs -r docker rmi
}

function dredis() {
    local port="6379"
    if [[ ! -z "$1" ]]; then
        # if provided port
        port=$1
    fi
    redis_image=$(docker images | sed 1d | fzf $FZF_MISC_CMD_OPTS --no-sort --tac | awk '{ printf "%s %s %s", $1, $2, $3}')
    redis_image_array=($redis_image)
    container_name=$(echo ${redis_image_array[0]} | awk -F'/' '{print $2}')
    echo $container_name
    echo "docker run -d -p $port:6379 --name $container_name-${redis_image_array[1]}-${port} ${redis_image_array[2]}"
    docker run -d -p $port:6379 --name $container_name-${redis_image_array[1]}-${port} ${redis_image_array[2]}
}

function dbash() {
    container=$(docker ps | sed 1d | fzf $FZF_MISC_CMD_OPTS --no-sort --tac | awk '{ printf $(NF)}')
    container_name=($container)
    echo "docker exec -it $container_name /bin/bash"
    docker exec -it $container_name /bin/bash
}

# Install z
. $HOME/z/z.sh

unalias z
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}

zz() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}

alias j=z
alias jj=zz

tf() {
    local test_name
    test_name=$(fd -g 'test_*.py' `fd -t d amztests` | xargs -n1 basename | fzf --height=50%)
    _run_test $test_name $1 $2
}



tt() {
    local test_name
    test_name=$(fd --full-path 'amztests/test*' --maxdepth=2 | xargs -n1 rg 'def test_' | awk '{split($0,a,"def"); split(a[2],b,"("); split(b[1],c," "); print c[1]}' | fzf --height=50%)
    _run_test $test_name $1 $2
}

_run_test() {
    local core_num ASAN_BUILD
    re='^[0-9]+$'
    if [[ $2 =~ $re ]] ; then
        core_num=$2
    elif [[ $3 =~ $re ]] ; then
        core_num=$3
    else
        core_num="16"
    fi

    if [[ (${2::1} == "a" || ${2::1} == "A") || ${3::1} == "a" || ${3::1} == "A" ]] ; then
        ASAN_BUILD="yes"
    fi

    if [[ ! -z "$1" ]]; then
        if [[ $ASAN_BUILD == "yes" ]]; then
            echo "ASAN_BUILD=yes TEST_PATTERN=$1 bb amztests"
            ASAN_BUILD=yes TEST_PATTERN=$1 bb amztests
        else
            echo "TEST_PATTERN=$1 bb amztests"
            TEST_PATTERN=$1 bb amztests
        fi
    fi
}

_sanity() {
    echo "bb amztests-sanity"
    bb amztests-sanity
}

_ws() {
  brazil ws --create -name $1 -vs elasticache-redis-release/mainline-development && cd $1
}

get(){
  local branch
  local pkg
  if [[ -z "$2" ]] ; then
    branch="mainline"
  else
    branch=$2
  fi
  
  if [[ $1 == "search" ]] ; then
    pkg="ElastiCacheSearch"
  elif [[ $1 == "redis" ]] ; then
    pkg="ElastiCacheRedis"
  elif [[ $1 == "json" ]] ; then
    pkg="ElastiCacheRedisJSONModule"
  else
    echo "Wrong package"
  fi

  echo "brazil ws use --package $pkg --branch $branch"
  brazil ws use --package $pkg --branch $branch
}

_ev(){
  # Set redis include dir
  export ELASTICACHE_REDIS_INCLUDE_DIR=$(brazil-path '[ElastiCacheRedis]pkg.src')/src
  # Set JSON include dir
  export JSON_INCLUDE_DIR=$(brazil-path '[ElastiCacheRedisJSONModule]pkg.src')/src/json
  # Set JSON lib dir
  export JSON_MODULE_LIB_DIR=$(brazil-path '[ElastiCacheRedisJSONModule]pkg.lib')
  tool_runtimefarm="$(brazil-path tool.runtimefarm)/"

  CLANG_LIB=$(find $tool_runtimefarm -maxdepth 1 -type d -name "clang-*")/lib
  CLANG_INCLUDE+=$(find $CLANG_LIB/clang/ -maxdepth 1 -type d -name "*.*.*")/include

  export LIBCLANG_PATH=$CLANG_LIB
  export BINDGEN_EXTRA_CLANG_ARGS="-isystem$CLANG_INCLUDE/"
}
